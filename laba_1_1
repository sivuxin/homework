%matplotlib inline
from numpy import *
import matplotlib.pyplot as plt

# NUMBER 4

def ran_q(d, k):
    psi = (random.randn(d * k) + 1j * random.randn(d * k))
    psi = psi / sqrt((sum(abs(psi) ** 2)))
    psi = np.reshape(psi, (d, k))
    ro = dot(psi, conj(psi).T)
    return ro

d = 6
k = 2

def part_trace(ro,d,k,num):
    if num == 1:
        temp = d
        d = k
        k = temp
    new_ro = zeros((d,d),dtype=complex)
    for i in range(k):
        m = [0]*i +[1] + [0]* (k-i-1)
        m = array(m).reshape(k,1)
        one = identity(d)
        if num == 0:
            elem = kron(one,m)
        else:
            elem = kron(m,one)
        new_ro += dot(conj(elem).T,dot(ro,elem))
    return new_ro


eig_l = []

for i in range(1000):
    ro =  ran_q(d, k)
    eig_l.extend(linalg.eigvals(ro).real)
      
plt.hist(eig_l)
plt.xlabel('Eigenvalue')
plt.ylabel('Frequency')
plt.show()

p=0
purity = []
for k in range(1,101):
    for j in range(50):
        a = ran_q(d, k)
        p+= trace(dot(a,a)) / 50
    purity.append(p.real)
    p = 0  

plt.plot(purity)
plt.xlabel('k')
plt.ylabel('Purity')
plt.show()
